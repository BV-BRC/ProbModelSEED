/*
=head1 ProbModelSEED

=head2 DISTINCTIONS FROM KBASE
	All operations print their results in an output folder specified by the ouptut_loc argument.
	Functions are not as atomic. For example, model reconstruction will automatically create SBML and excel versions of model.
	Lists of essential genes will be automatically predicted. Lists of gapfilled reactions will be automatically printed into files.
	Combining workspace and ID arguments into single "ref" argument.
	Alot more output files, because not every output needs to be a typed object anymore.
	Thus functions create a folder full of output - not necessarily a single typed object.
*/
module ProbModelSEED {
    /*********************************************************************************
    Universal simple type definitions
   	*********************************************************************************/
    /* indicates true or false values, false <= 0, true >=1 */
    typedef int bool;
    
    /* Reference to location in PATRIC workspace (e.g. /home/chenry/models/MyModel)*/
    typedef string ref;
    
    /* Standard perl timestamp (e.g. 2015-03-21-02:14:53)*/
    typedef string timestamp;
    
    /* An enum of the various variable types in FBA [flux/drainflux/biomassflux]*/
    typedef string vartype;
    
    /* An enum of the various types of thermodynamic variables in FBA [NO_THERMO/SIMPLE_THERMO/THERMO_NO_ERROR/THERMO_MIN_ERROR]*/
    typedef string thermotype;
    
    /* An enum of the various types of signs in FBA constraints [</=/>]*/
    typedef string sign;
    
    /* An enum of the various penalty types in FBA [NO_STRUCTURE/INFEASIBLE_DIRECTION/NON_KEGG/DELTAG_MULTIPLIER... incomplete list]*/
    typedef string penaltytype;
    
    /* An enum of file formats for input media file [TSV]*/
    typedef string mediaformat;
    
    /* An enum of accepted workspace types [see workspace repo for options]*/
    typedef string type;
    
    /* An enum of atom types in potential uptake limits [C/N/P/O/S]*/
    typedef string atomtype;
    
    /*********************************************************************************
    Complex data structures to support functions
   	*********************************************************************************/
    
    /* Data-structure for model constraints
    	sign equality - equality for constraint
    	float rhs - right hand side of constraint
    	list<tuple<vartype type, string id, float coefficient>> terms - list of variables forming left hand side of constraint
    */
    typedef structure {
    	sign equality;
    	float rhs;
    	list<tuple<vartype type, string id, float coefficient>> terms;
    } constraint;
    
    /* This is a standard data-structure returned as output for all functions 
    	ref path - reference to location where output folder is stored
    	mapping<type,list<string>> typed_objects_generated - list of typed objects generated by function, organized by type
    	list<tuple<timestamp,string class,string message>> messages - messages generated by function to report on operations
    */
    typedef structure {
    	ref path;
    	mapping<type,list<string>> typed_objects_generated;
    	mapping<string filename,string description> output_files;
    	list<tuple<timestamp,string class,string message>> messages;
    	string arguments;
    } function_output;
    
    /*********************************************************************************
    Functions for data transformation and integration
   	*********************************************************************************/
	
	/* Input parameters for the "import_media" function.
		Description:
		This function takes a link to an input media file, standardizes the media, and creates new media object
		
		Required inputs:
		ref mediafile - reference to an input file with media data
				
		Optional inputs:
		ref output_loc - reference to location where output should be created
		string ouput_id - id to be used for media
		mediaformat format - format for uploaded file
		
	*/
    typedef structure {
		ref mediafile;
		ref output_loc;
		string ouput_id;
		mediaformat format;
    } import_media_params;
    /*
        Import a media formulation and map to central biochemistry database
    */
    authentication required;
    funcdef import_media(import_media_params input) returns (function_output output);

    
    /*********************************************************************************
    Functions for model reconstruction and analysis
   	*********************************************************************************/
    
    /* Input parameters for the "reconstruct_fbamodel" function.
		Description:
		This function constructs a metabolic model from the specified template and genome.
		
		Required inputs:
		ref genome - reference to genome for which model should be constructed
		ref output_loc - location where output should be printed
		
		Optional inputs:
		ref template_model - reference to template from which model should be constructed	
		string ouput_id - id to be used for output model
		bool coremodel - set to true to construct a core model
		bool fulldb - set to true if model should include full database in specified or computed template
		
	*/
    typedef structure {
		ref genome;
		ref output_loc;
		ref template_model;	
		string ouput_id;
		bool coremodel;
		bool fulldb;
    } reconstruct_fbamodel_params;
    /*
        Build a genome-scale metabolic model based on annotations in an input genome typed object
    */
    authentication required;
    funcdef reconstruct_fbamodel(reconstruct_fbamodel_params input) returns (function_output output);
	
	/* Input parameters for the "flux_balance_analysis" function.
	
		Required inputs:
		ref model - reference to model on which FBA should be run
		
		Optional inputs:
		ref output_loc - location where output should be printed
		ref media - reference to media for FBA study
		bool fva;
		bool simulateko;
		bool minimizeflux;
		bool findminmedia;
		bool allreversible;
		thermotype thermo_const_type;
		list<string> media_supplements;
		list<string> geneko;
		list<string> rxnko;
		string output_id;
		float maxflux;
		float maxuptake;
		float minuptake;
		float primary_objective_fraction;
		mapping<atomtype,float> uptakelim;
		list<tuple<vartype type,string id,float min,float max>> custom_bounds;
		list<tuple<vartype type,string id,float coefficient>> objective;
		list<constraint> custom_constraints;
	*/	
    typedef structure {
		ref model;
		ref output_loc;
		ref media;
		bool fva;
		bool simulateko;
		bool minimizeflux;
		bool findminmedia;
		bool allreversible;
		thermotype thermo_const_type;
		list<string> media_supplements;
		list<string> geneko;
		list<string> rxnko;
		string output_id;
		float maxflux;
		float maxuptake;
		float minuptake;
		float primary_objective_fraction;
		mapping<atomtype,float> uptakelim;
		list<tuple<vartype type,string id,float min,float max>> custom_bounds;
		list<tuple<vartype type,string id,float coefficient>> objective;
		list<constraint> custom_constraints;
    } flux_balance_analysis_params;
    /*
        Run flux balance analysis on a single model
    */
    authentication required;
    funcdef flux_balance_analysis(flux_balance_analysis_params input) returns (function_output output);	
	
	/* Input parameters for the "gapfill_model" function.
	
		Required inputs:
		ref model - reference to model on which gapfilling should be run
		
		Optional inputs:
		ref output_loc - location where output should be printed
		ref media - reference to media for FBA study
		ref probanno - reference to probabilistic annotation for gapfilling
		ref source_model - reference to model with source biochemistry for gapfilling
		bool comprehensive - a boolean indicating 
		bool allreversible;
		thermotype thermo_const_type;
		list<string> media_supplements;
		list<string> geneko;
		list<string> rxnko;
		string output_id;
		float maxflux;
		float maxuptake;
		float minuptake;
		float min_objective_value;
		float max_objective_fraction;
		mapping<atomtype,float> uptakelim;
		list<tuple<vartype type,string id,float min,float max>> custom_bounds;
		list<tuple<vartype type,string id,float coefficient>> objective;
		list<constraint> custom_constraints;
		mapping<penaltytype,float> custom_penalties;
	*/	
    typedef structure {
		ref model;
		ref output_loc;
		ref media;
		ref probanno;
		ref source_model;
		bool comprehensive;
		bool allreversible;
		thermotype thermo_const_type;
		list<string> media_supplements;
		list<string> geneko;
		list<string> rxnko;
		string output_id;
		float maxflux;
		float maxuptake;
		float minuptake;
		float min_objective_value;
		float max_objective_fraction;
		mapping<atomtype,float> uptakelim;
		list<tuple<vartype type,string id,float min,float max>> custom_bounds;
		list<tuple<vartype type,string id,float coefficient>> objective;
		list<constraint> custom_constraints;
		mapping<penaltytype,float> custom_penalties;
    } gapfill_model_params;
    /*
        Gapfills a model in a single condition
    */
    authentication required;
    funcdef gapfill_model(gapfill_model_params input) returns (function_output output);	
};